{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CarRent The next-generation car-rent-system Features Easy to use Available everywhere mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Test graph graph TD A[Christmas] -->|Get money| B(Go shopping) B --> C{Let me think} C -->|One| D[Laptop] C -->|Two| E[iPhone] C -->|Three| F[fa:fa-car Car] Test image","title":"Welcome to CarRent"},{"location":"#welcome-to-carrent","text":"The next-generation car-rent-system","title":"Welcome to CarRent"},{"location":"#features","text":"Easy to use Available everywhere mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Features"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#test-graph","text":"graph TD A[Christmas] -->|Get money| B(Go shopping) B --> C{Let me think} C -->|One| D[Laptop] C -->|Two| E[iPhone] C -->|Three| F[fa:fa-car Car]","title":"Test graph"},{"location":"#test-image","text":"","title":"Test image"},{"location":"01%20Introduction%20and%20Goals/1.1%20Requirement%20Overview/Requirements%20Overview/","text":"Requirement Overview Content The functional requirements are described here . The goal of the project is to create a car-rent-system based on .NET Core Web API with a clean Three-Tier-Architecture. Motivation To develop and document a reliable web-based car-rent-system","title":"Requirements Overview"},{"location":"01%20Introduction%20and%20Goals/1.1%20Requirement%20Overview/Requirements%20Overview/#requirement-overview","text":"Content The functional requirements are described here . The goal of the project is to create a car-rent-system based on .NET Core Web API with a clean Three-Tier-Architecture. Motivation To develop and document a reliable web-based car-rent-system","title":"Requirement Overview"},{"location":"02%20System%20Overview/2.1%20C4%20Pattern/Components/","text":"Component Diagram","title":"Components"},{"location":"02%20System%20Overview/2.1%20C4%20Pattern/Components/#component-diagram","text":"","title":"Component Diagram"},{"location":"02%20System%20Overview/2.1%20C4%20Pattern/Containers/","text":"Container Diagram","title":"Containers"},{"location":"02%20System%20Overview/2.1%20C4%20Pattern/Containers/#container-diagram","text":"","title":"Container Diagram"},{"location":"02%20System%20Overview/2.1%20C4%20Pattern/Context/","text":"Context Diagram","title":"Context"},{"location":"02%20System%20Overview/2.1%20C4%20Pattern/Context/#context-diagram","text":"","title":"Context Diagram"},{"location":"02%20System%20Overview/2.2%20Use%20Case/Use%20Case/","text":"Use Case Description UC1: Kunden verwalten Der Sachbearbeiter (Admin user) kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. UC2: Autos verwalten Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. UC3: Autos reservieren Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt UC4 User account erstellen User k\u00f6nnen sich einen Useraccount erstellen um anschliessend \u00fcber den Account Autos zu mieten UC5: Profil verwalten Sowohl Admin User als auch User k\u00f6nnen ihr Profil editieren und Name und Adresse anpassen. UC6: Autos mieten Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt.","title":"Use Case"},{"location":"02%20System%20Overview/2.2%20Use%20Case/Use%20Case/#use-case","text":"","title":"Use Case"},{"location":"02%20System%20Overview/2.2%20Use%20Case/Use%20Case/#description","text":"","title":"Description"},{"location":"02%20System%20Overview/2.2%20Use%20Case/Use%20Case/#uc1-kunden-verwalten","text":"Der Sachbearbeiter (Admin user) kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen.","title":"UC1: Kunden verwalten"},{"location":"02%20System%20Overview/2.2%20Use%20Case/Use%20Case/#uc2-autos-verwalten","text":"Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation.","title":"UC2: Autos verwalten"},{"location":"02%20System%20Overview/2.2%20Use%20Case/Use%20Case/#uc3-autos-reservieren","text":"Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt","title":"UC3: Autos reservieren"},{"location":"02%20System%20Overview/2.2%20Use%20Case/Use%20Case/#uc4-user-account-erstellen","text":"User k\u00f6nnen sich einen Useraccount erstellen um anschliessend \u00fcber den Account Autos zu mieten","title":"UC4 User account erstellen"},{"location":"02%20System%20Overview/2.2%20Use%20Case/Use%20Case/#uc5-profil-verwalten","text":"Sowohl Admin User als auch User k\u00f6nnen ihr Profil editieren und Name und Adresse anpassen.","title":"UC5: Profil verwalten"},{"location":"02%20System%20Overview/2.2%20Use%20Case/Use%20Case/#uc6-autos-mieten","text":"Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt.","title":"UC6: Autos mieten"},{"location":"03%20Domain%20Model/Domain%20Model/","text":"Domain Model","title":"Domain Model"},{"location":"03%20Domain%20Model/Domain%20Model/#domain-model","text":"","title":"Domain Model"},{"location":"04%20System%20Sequence/System%20Sequence/","text":"System Sequence Contents. Any requirement that constrains software architects in their freedom of design and implementation decisions or decision about the development process. These constraints sometimes go beyond individual systems and are valid for whole organizations and companies. Motivation. Architects should know exactly where they are free in their design decisions and where they must adhere to constraints. Constraints must always be dealt with; they may be negotiable, though. Form. Simple tables of constraints with explanations. If needed you can subdivide them into technical constraints, organizational and political constraints and conventions (e.g. programming or versioning guidelines, documentation or naming conventions)","title":"System Sequence"},{"location":"04%20System%20Sequence/System%20Sequence/#system-sequence","text":"Contents. Any requirement that constrains software architects in their freedom of design and implementation decisions or decision about the development process. These constraints sometimes go beyond individual systems and are valid for whole organizations and companies. Motivation. Architects should know exactly where they are free in their design decisions and where they must adhere to constraints. Constraints must always be dealt with; they may be negotiable, though. Form. Simple tables of constraints with explanations. If needed you can subdivide them into technical constraints, organizational and political constraints and conventions (e.g. programming or versioning guidelines, documentation or naming conventions)","title":"System Sequence"},{"location":"05%20Views/5.1%20Logical/Logical%20View/","text":"Logical View","title":"Logical View"},{"location":"05%20Views/5.1%20Logical/Logical%20View/#logical-view","text":"","title":"Logical View"},{"location":"05%20Views/5.2%20Deployment/Deployment%20View/","text":"Deployment View","title":"Deployment View"},{"location":"05%20Views/5.2%20Deployment/Deployment%20View/#deployment-view","text":"","title":"Deployment View"},{"location":"06%20Quality%20Tree/Quality%20Tree/","text":"","title":"Quality Tree"},{"location":"07%20Test%20Strategy/Test%20Strategy/","text":"","title":"Test Strategy"},{"location":"08%20Metrics/Metrics/","text":"","title":"Metrics"},{"location":"09%20Glossary/Glossary/","text":"Glossary Contents. The most important domain and technical terms that your stakeholders use when discussing the system. You can also see the glossary as source for translations if you work in multi-language teams. Motivation. You should clearly define your terms, so that all stakeholders have an identical understanding of these terms do not use synonyms and homonyms Form. A table with columns <Term> and <Definition>. Potentially more columns in case you need translations. Term Definition Term 1 <definition-1> Term 2 <definition-2>","title":"Glossary"},{"location":"09%20Glossary/Glossary/#glossary","text":"Contents. The most important domain and technical terms that your stakeholders use when discussing the system. You can also see the glossary as source for translations if you work in multi-language teams. Motivation. You should clearly define your terms, so that all stakeholders have an identical understanding of these terms do not use synonyms and homonyms Form. A table with columns <Term> and <Definition>. Potentially more columns in case you need translations. Term Definition Term 1 <definition-1> Term 2 <definition-2>","title":"Glossary"}]}